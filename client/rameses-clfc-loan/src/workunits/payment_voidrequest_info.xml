<workunit>
    <invokers>
        <invoker type="voidrequest:create" action="create" caption="Void Request" target="popup" resizable="false"/>
        <invoker type="voidrequest:open" action="open" caption="Void Request" target="popup" resizable="false"/>
        
        <invoker type="formActions" action="approve" mnemonic="v" visibleWhen="#{mode == 'read' &amp;&amp; entity.state == 'PENDING'}" 
            role="APPROVER" tooltip="Approve"/>
    </invokers>
    
    <code>
        import com.rameses.rcp.common.*;
        import com.rameses.rcp.annotations.*;
        import com.rameses.rcp.framework.*;
        import com.rameses.osiris2.client.*;
        import com.rameses.osiris2.common.*;
        import java.rmi.server.UID;
        
        class PaymentVoidRequestController extends CRUDController
        {
            @Caller
            def caller;
        
            @Binding
            def binding;
        
            @Service("LoanVoidPaymentService")
            def svc;
            
            String serviceName = 'LoanVoidPaymentService';
            String entityName = 'voidrequest';
            
            boolean allowCreate = false;
            boolean allowEdit = false;
            boolean allowDelete = false;
              
            def route
            def collectionsheet
            def payment;
            def requestedby;
            
            Map createEntity() {
                return [
                    objid: 'PVR'+new UID(),
                    state: 'DRAFT',
                    route: route,
                    paymentid: payment.objid,
                    payamount: payment.payamount,
                    loanappid: collectionsheet.appid,
                    borrower: svc.openCustomer(collectionsheet.borrower),
                    appno: collectionsheet.appno,
                    requestedby: requestedby
                ];
            }
            
            void beforeSave( Object data ) { 
                data.routecode = data.route.code;
                data.collectorid = ClientContext.currentContext.headers.USERID;
            }
            
            void afterSave( Object data ) {
                if (payment) {
                    payment.voidid = data.objid;
                }
            }
            
            void beforeOpen( Object data ) {
                if (payment) data.objid = payment.voidid;
            }
            
            def approve() {
                super.approve();
                if (entity.state == 'APPROVED' &amp;&amp; payment) {
                    payment.isvoided = 1;
                    if (collectionsheet) {
                        collectionsheet.total = 0;
                        def payments = collectionsheet.payments.findAll{ it.objid != payment.objid};
                        payments.each{
                            if (it.isvoided == 0) collectionsheet.total += it.payamount;
                        }
                        caller.binding.refresh('totalamount');
                    }
                }
            }
            
            boolean getIsAllowApprove() {
                if (ClientContext.currentContext.headers.ROLES.containsKey("LOAN.APPROVER")) return true;
                return false;
            }
         }
    </code>
    
    <pages>
        <page template="com.rameses.clfc.loan.payment.voidrequest.PaymentVoidRequestPage" />
    </pages>
</workunit>