<workunit>
    <invokers>
        <invoker type="voidrequest:create" action="create" caption="Void Request" target="popup" resizable="false"/>
        <invoker type="voidrequest:open" action="open" caption="Void Request" target="popup" resizable="false"/>
        
        <invoker type="formActions" action="approve" mnemonic="v" visibleWhen="#{mode == 'read' &amp;&amp; entity.state == 'PENDING'}" 
            role="APPROVER" tooltip="Approve"/>
        <invoker type="formActions" action="disapprove" caption="Disapprove" mnemonic="d" visibleWhen="#{mode == 'read' &amp;&amp; entity.state == 'PENDING'}" 
            role="APPROVER" tooltip="Disapprove"/>
    </invokers>
    
    <code>
        import com.rameses.rcp.common.*;
        import com.rameses.rcp.annotations.*;
        import com.rameses.rcp.framework.*;
        import com.rameses.osiris2.client.*;
        import com.rameses.osiris2.common.*;
        import java.rmi.server.UID;
        
        class PaymentVoidRequestController extends CRUDController
        {
            @Service("LoanVoidRequestService")
            def svc;
            
            String serviceName = 'LoanVoidRequestService';
            String entityName = 'voidrequest';
            
            boolean allowCreate = false;
            boolean allowEdit = false;
            boolean allowDelete = false;
              
            def route;
            def collectionsheet;
            def payment;
            def collector;
            def collectionid;
            def txncode;
            def afterApproveHandler;
            def afterDisapproveHandler;
            def afterSaveHandler;
            
            Map createEntity() {
                return [
                    objid       : 'PVR'+new UID(),
                    state       : 'DRAFT',
                    route       : route,
                    paymentid   : payment.objid,
                    payamount   : payment.payamount,
                    loanapp     : collectionsheet.loanapp,
                    borrower    : svc.openCustomer(collectionsheet.borrower),
                    collector   : collector,
                    txncode     : txncode,
                    collectionid: collectionid
                ];
            }
            
            void beforeSave( Object data ) { 
                data.routecode = data.route.code;
            }
            
            void afterSave( Object data ) {
                println 'data after save = '+data;
                println 'afterSaveHandler = '+afterSaveHandler;
                if (afterSaveHandler) afterSaveHandler(data);
            }
            
            void beforeOpen( Object data ) {
                if (payment) {
                    data.objid = payment.voidid;
                }
                data.txncode = txncode;
                println 'data = '+data;
            }
            
            def approve() {
                super.approve();
                if (entity.state == 'APPROVED') {
                    if (afterApproveHandler) afterApproveHandler(entity);
                }
            }
            
            def disapprove() {
                entity = svc.disapprove(entity);
                if (entity.state == 'DISAPPROVED') {
                    if (afterDisapproveHandler) afterDisapproveHandler(entity);
                }
            }
            
            public boolean getIsAllowApprove() {
                def flag = true;
                if (!ClientContext.currentContext.headers.ROLES.containsKey("LOAN.APPROVER") || mode == 'create') flag = false;
                println 'isAllowApprove -> ' + flag;
                return flag;
            }
         }
    </code>
    
    <pages>
        <page template="com.rameses.clfc.loan.payment.voidrequest.PaymentVoidRequestPage" />
    </pages>
</workunit>