import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;
import org.joda.time.*;

class CustomerService 
{	
	@ActiveDB(value='customer')
	def em;

	@Service('EntityService')
	def entitySvc;

	@Service('DateService')
	def dateSvc;

	@Service('SequenceService')
	def sequenceSvc;

	@Env 
	def env;


	@ProxyMethod
	public def open(params) {
		return entitySvc.open(params); 
	}

	@ProxyMethod
	public def create(data) {
		data.dtcreated = dateSvc.serverDate.toString(); 
		LocalDate start = new LocalDate(data.birthdate);
		LocalDate end = new LocalDate(data.dtcreated.split(' ')[0]);
		int years = Years.yearsBetween(start, end).getYears();
		if (years < 18) throw new Exception('Customer must be 18 and above.');
		
		data.type = 'INDIVIDUAL';
		data.state = 'ACTIVE';
		data.mode = 'ONLINE';
		data.createdby = env.USER; 
		data.branchid = env.ORGID;

		def seqname = 'customer'+data.branchid;
		data.custno = data.branchid + sequenceSvc.getNextFormattedSeriesA(seqname,7);
		data.entityno = data.custno;
		data.dtmodified = data.dtcreated;
		data.modifiedby = data.createdby;
		return entitySvc.create(data); 
	} 

	@ProxyMethod
	public def update(data) {
		data.type = 'INDIVIDUAL';
		data.dtmodified = dateSvc.serverDate.toString(); 
		data.modifiedby = env.USER; 
		return entitySvc.update(data); 
	} 


	def searchTypes = [
		[filter: ' c.lastname LIKE $P{searchtext} '],
		[filter: ' c.firstname LIKE $P{searchtext} '], 
		[filter: ' c.custno LIKE $P{searchtext} '] 
	];

	@ProxyMethod 
	public def getList( params ) { 
		params.searchtext = removeLeadingChar(params.searchtext,'%')+'%';
		if (!params._start) params._start = 0;
		if (!params._limit) params._limit = 10;

		for (o in searchTypes) { 
			params.putAll(o); 
			def list = em.getLookupCustomers(params); 
			if (!list.isEmpty()) return list; 
		}
		return [];
	} 

	@ProxyMethod
	public def getConnections( params ) {
		return em.getConnections(params); 
	}


    private String removeLeadingChar(String text, def ch) {
    	if (text == null) return "";

        while (true) { 
            if (!text.startsWith(ch+"")) break; 
            
            text = text.substring(1); 
        } 
        return text; 
    } 	
}
