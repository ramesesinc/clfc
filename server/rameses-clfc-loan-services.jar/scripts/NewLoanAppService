import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class NewLoanAppService 
{	
	@ActiveDB(value='loanapp')
	def em;

	@Service('DateService') 
	def dateSvc;

	@Service('SequenceService') 
	def seqSvc;

	@Env 
	def env;

	@ProxyMethod 
	public void create(data) { 	
		data.branch = [code: env.ORGID, name: env.ORGNAME];
		data.dtcreated = dateSvc.serverDate.toString();
		data.version = 1;
		data.state = 'INCOMPLETE'; 

		def seqno = seqSvc.getCurrentSeries('loan'); 
		data.loanno = data.branch.code + addLeadingChars(seqno,'0',8); 
		data.appno = data.loanno + addLeadingChars(data.version,'0',2); 
		data = em.create(data); 

		buildSearchIndex(data); 
		buildBorrower(data);
	} 

	private void buildSearchIndex(data) { 
		def name = data.borrower.lastname + ', ' + data.borrower.firstname; 
		if (data.borrower.middlename) name = name + ' ' + data.borrower.middlename; 

		data.fullborrowername = name;
		data.dtposted = data.dtcreated; 
		data.postedby = data.createdby;
		data.branchcode = data.branch.code;
		data.branchname = data.branch.name;
		em.create(data, 'search_index'); 
	}

	private void buildBorrower(data) { 
		def o = [
			objid: 'BIDX' + new UID(), 
			loanappid: data.objid, 
			loanappno: data.appno, 
			borrowerid: data.borrower.objid, 
			borrowername: data.borrower.name, 
			borrowertype: 'PRINCIPAL' 
		];
		em.create(o, 'borrower_index'); 

		o = [
			objid: 'LB' + new UID(), 
			parentid: data.objid, 
			principalid: data.borrower.objid,
			relaterid: null, 
			type: 'PRINCIPAL',
			relation: null 
		];
		em.create(o, 'loanapp_borrower'); 
		em.create(data.borrower, 'borrower');
	}	

	private String addLeadingChars(value, schar, length) {
		def buffer = new StringBuffer();
		def sval = (value == null? "": value.toString()); 
		def len = length-sval.length();
		for (int i=0; i<len; i++) {
			buffer.append(schar); 
		} 
		buffer.append(sval);
		return buffer.toString(); 
	} 
}
