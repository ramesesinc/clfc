import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.util.*;

class DeviceLoginService
{
	@ActiveDB(value="device_login")
	def device_login;

	@ActiveDB(value="loan_ledger_billing")
	def ledger_billing;

	@Service("DateService")
	def dateSvc;

	@ProxyMethod
	public def login( params ) {
		if (!params.username) throw new Exception('Please specify username.');
		if (!params.password) throw new Exception('Please specify password.');

		def user = device_login.findFieldCollectorByUsername(params);
		if (!user) throw new Exception("User is not a Field Collector.");
		
		def encval = Encoder.MD5.encode(params.password, params.username)
		def routes = [];
		if (encval == user.pwd) {
			//Get Routes
			def date = dateSvc.parseCurrentDate();
			def d = date.year+'-'+date.month+'-'+date.day;
			def billing = ledger_billing.getBillingByCollectorid([collectorid: user.objid, billdate: d]);
			def subbilling = ledger_billing.getBillingBySubCollectorid([subcollectorid: user.objid, billdate: d]);
			if (!billing && !subbilling) throw new Exception('You have no billing to download for today.');

			billing.addAll(subbilling);

			def list;
			billing.each{bill->
				list = ledger_billing.getRoutesByBillingid([billingid: bill.objid]);
				list.each{
					it.billingid = bill.objid;
					routes.add(it);
				}
			}

		} else throw new Exception('Username/Password is incorrect!');

		return [ routes: routes, serverdate: dateSvc.serverDate, collectorid: user.objid, billingid: bill.objid];
	}
}
