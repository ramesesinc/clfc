import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class CaptureLoanAppService 
{	
	@ActiveDB(value='loanapp')
	def loanapp;

	@ActiveDB(value='loanapp_borrower')
	def loanapp_borrower; 	

	@ActiveDB(value='loan_product_type')
	def productType;

	@ActiveDB(value='borrower')
	def borrower; 	

	@Service('DateService') 
	def dateSvc;

	@Service('SequenceService') 
	def seqSvc;

	@Service('LoanAppUtil')
	def loanAppUtil;	

	@Env 
	def env;

	@ProxyMethod 
	public def initEntity() { 
        def entity = [
            objid: 'LOAN' + new UID(), 
            borrower: [:], 
            producttype: [:], 
            branch: [:], 
            productTypes: productType.getList()  
        ]; 	
        return entity; 	
	} 

	@ProxyMethod 
	public void checkBorrowerForExistingLoan( params ) {
		loanAppUtil.checkBorrowerForExistingLoan( params ); 
	}	

	@ProxyMethod 
	public def create(data) { 	
		//verify the borrower first 
		checkBorrowerForExistingLoan([borrowerid: data.borrower.objid]); 
		
		if (data.clienttype == 'MARKETED' && !data.marketedby) 
			throw new Exception('Please specify marketedby'); 

		data.branch = [code: env.ORGID, name: env.ORGNAME];
		data.dtcreated = dateSvc.serverDate.toString();
		data.createdby = env.USER; 
		
		createPreviousLoans(data); 
		data.state = 'RELEASED'; 
		data.version = data.previousloans.size()+1;

		//def seqno = seqSvc.getNextSeries('loan'); 
		//data.loanno = data.branch.code + addLeadingChars(seqno,'0',8); 
		//data.appno = data.loanno + addLeadingChars(data.version,'0',2); 
		data.appno = data.loanno; 
		data.appmode = 'CAPTURE'; 
		data.remarks = data.purpose;
		data = loanapp.create(data); 
		data = loanapp.create(data, 'loanapp_capture'); 
		buildBorrower(data);
		return data; 
	} 

	private void createPreviousLoans(data) { 
		if (data.previousloans == null) data.previousloans = []; 

		int versionno = 1;
		for (o in data.previousloans) { 
			println 'saving previous loan-> version='+versionno;
			o.objid = 'LOANPRV' + new UID(); 
			o.state = 'CLOSED'; 
			o.appno = o.loanno; 
			o.apptype = 'CAPTURE';
			o.appmode = 'CAPTURE'; 
			o.dtcreated = data.dtcreated;
			o.createdby = data.createdby;
			o.borrower = data.borrower;
			loanapp.create(o, 'loanapp_previous');

			o.version = versionno; 
			loanapp.create(o, 'loanapp_previous_capture'); 
			versionno++; 
		} 
	}

	private void buildBorrower(data) { 
		def o = borrower.findByObjid([objid: data.borrower.objid]); 
		if (o == null) { 
			borrower.create(data.borrower); 
		} else {
			o.putAll(data.borrower); 
			borrower.update(o); 
		}
		
		o = [
			objid: 		 'LB' + new UID(), 
			parentid: 	 data.objid, 
			borrowerid:  data.borrower.objid, 
			principalid: data.borrower.objid,
			type:        'PRINCIPAL' 
		];
		loanapp_borrower.create(o); 
	} 

	private String addLeadingChars(value, schar, length) {
		def buffer = new StringBuffer();
		def sval = (value == null? "": value.toString()); 
		def len = length-sval.length();
		for (int i=0; i<len; i++) {
			buffer.append(schar); 
		} 
		buffer.append(sval);
		return buffer.toString(); 
	} 
}
