import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class JointBorrowerService 
{	
	@ActiveDB(value='loanapp_borrower')
	def loanapp_borrower; 

	@Service('LoanAppService') 
	def loanAppService; 

	@Service('BorrowerService') 
	def borrowerService; 

	@ProxyMethod 
	public def open( params ) { 
		if (!params.objid) throw new Exception('Please specify objid'); 

		def data = loanAppService.findByObjid(params);
		if (!data) throw new Exception('\''+params.objid+'\' loan application record not found'); 

		data.borrowers = loanapp_borrower.getJointBorrowers([parentid: data.objid]); 
		return data; 
	} 

	@ProxyMethod 
	public def openBorrower( params ) {
		return borrowerService.open(params);  
	}

	@ProxyMethod 
	public def update ( params ) {
		if (!params.objid) throw new Exception('Please specify objid'); 

		def data = loanAppService.findByObjid(params);
		if (!data) throw new Exception('\''+params.objid+'\' loan application record not found'); 

		def borrowers = params.remove('borrowers'); 
		for (o in borrowers) {
			o.name = borrowerService.createFullName(o.lastname, o.firstname, o.middlename); 
			o.principalid = data.borrower.objid; 
			borrowerService.update(o); 
		}

		loanapp_borrower.removeJointBorrowers([parentid: data.objid]); 
		for (o in borrowers) {
			def lb = [
				objid: 		  'LBRWR' + new UID(), 
				parentid: 	  data.objid, 
				borrowerid:   o.objid, 
				borrowername: o.name, 
				principalid:  data.borrower.objid, 
				relaterid:    o.objid, 
				type: 		  'JOINT',
				relation:     o.relation  
			]; 
			loanapp_borrower.create(lb, 'joint'); 
		} 
	
		def list = loanapp_borrower.getBorrowerNames([parentid: data.objid]); 
		for (o in list) {
			o.borrowerid = o.objid; 
			o.borrowertype = o.type; 			
			o.borrowername = borrowerService.createFullName(o.lastname, o.firstname, o.middlename); 
		}
		loanAppService.updateBorrowerIndices(data.objid, list);  
		return data; 
	} 
}
