import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class BorrowerService 
{	
	@ActiveDB(value='borrower') 
	def em;


	@ProxyMethod 
	public def open( data ) {
		def o = em.read(data); 
		if (o == null) throw new Exception('borrower record not found');

		o.children = em.getChildren([borrowerid: o.objid]); 
		for (child in o.children) {
			child.employments = em.getEmployments([refid: child.objid]); 
			child.otherincomes = em.getOtherIncomes([refid: child.objid]); 
		} 
		o.educations = em.getEducations([borrowerid: o.objid]);
		return o;
	}

	@ProxyMethod 
	public def update( data ) {
		def o = em.findByObjid([objid: data.objid]); 
		if (o == null) {
			em.create(data); 
		} else {
			em.update(data);
		}
		updateChildren(data);
		updateEducations(data);
		return data; 
	}

	private void updateChildren(data) {
		def oldchildren = em.getChildren([borrowerid: data.objid]); 
		oldchildren?.each {
			em.removeEmployments([refid: it.objid]); 
			em.removeOtherIncomes([refid: it.objid]);
		}

		em.removeChildren([borrowerid: data.objid]); 
		if (data.children == null) data.children = [];

		for (o in data.children) {
			o.borrowerid = data.objid; 
			em.create(o, 'children'); 

			if (o.employments == null) o.employments = [];
			for (oo in o.employments) { 
				oo.refid =  o.objid; 
				em.create(oo, 'employment'); 
			} 

			if (o.otherincomes == null) o.otherincomes = [];
			for (oo in o.otherincomes) { 
				oo.refid =  o.objid; 
				em.create(oo, 'sourceofincome'); 
			} 
		} 
	} 

	private void updateEducations(data) {
		em.removeEducations([borrowerid: data.objid]); 
		if (data.educations == null) data.educations = [];

		for (o in data.educations) { 
			o.borrowerid =  data.objid; 
			em.create(o, 'education'); 
		} 
	}
}
