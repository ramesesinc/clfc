import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class LoanAppBusinessService 
{
	@ActiveDB(value='loanapp')
	def loanapp;

	@ActiveDB(value='loanapp_business')
	def business;

	@Env
	def env;

	@ProxyMethod 
	public def open( params ) { 
		if (!params.objid) throw new Exception('Please specify objid'); 

		def data = loanapp.findByObjid(params);
		if (!data) throw new Exception('\''+params.objid+'\' loan application record not found'); 

		data.businesses = business.getList([parentid: params.objid]);
		return data;
	} 

	@ProxyMethod 
	public def update( params ) {
		if (!params.objid) throw new Exception('Please specify objid');

		def data = loanapp.findByObjid(params);
		if (!data) throw new Exception('\''+params.objid+'\' loan application record not found'); 

		if (params.businesses == null) params.businesses = [];
		data.businesses = params.remove('businesses');

		business.removeItems([parentid: data.objid]);		
		for (o in data.businesses) {
			o.objid = 'BUSI'+new UID();
			o.parentid = data.objid; 
			if (o.ci != null) {
				o.ci.filedby = env.USERID; 
			} 
			business.create(o); 
		} 

		if (data.businesses.isEmpty()) {
			loanapp.changeState([objid: data.objid, state:'INCOMPLETE']); 
		} else if (data.state == 'INCOMPLETE') {
			loanapp.changeState([objid: data.objid, state:'PENDING']); 
		} 

		data = loanapp.findByObjid(params);
		def o = loanapp.findSearchIndex(data); 
		o.state = data.state; 
		loanapp.update(o, 'search_index'); 
		
		return loanapp.findByObjid(params); 
	} 
} 
