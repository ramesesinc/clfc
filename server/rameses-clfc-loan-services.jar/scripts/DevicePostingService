import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.server.common.*;

class DevicePostingService
{
	@ActiveDB(value="batch_collectionsheet")
	def batch_collectionsheet;

	@ActiveDB(value="void_payment")
	def void_payment;

	@ActiveDB(value="sysuser")
	def sysuser;

	@ActiveDB(value="loan_ledger_billing")
	def loan_billing;

	@ActiveDB(value="loan_ledger_specialcollection")
	def specialcollection;

	@Service("DeviceLoanBillingService")
	def device_billing;

	@Service("DateService")
	def dateSvc;

	@Service("MobileTrackerService")
	def trackerSvc;

	@ProxyMethod
	public void postPayment( params ) {
		if (!params.payment) throw new Exception("Please specify payment.");
		postCollectionSheet(params);

		def itm = batch_collectionsheet.read(params.payment, "payment");
		if (!itm) {
			def cs = batch_collectionsheet.read([objid: params.sessionid]);
			if (!cs) throw new Exception("Collection sheet does not exist or has already been deleted.");
			cs.totalamount += params.payment.amount;
			batch_collectionsheet.update(cs, "totalamount");

			itm = [
				objid: params.payment.objid,
				parentid: params.collectionsheet.detailid,
				refno: params.payment.refno,
				paytype: params.payment.type,
				payamount: params.payment.amount,
				dtposted: dateSvc.serverDate,
				postedby: 'COLLECTOR NOT IDENTIFIED'
			];
			def user = sysuser.read([objid: params.collectorid]);
			if (user) itm.postedby = user.name;
			batch_collectionsheet.create(itm, "payment");
			def map = [
				trackerid: params.trackerid,
				txntype: params.type? params.type : 'NORMAL',
				refid: params.payment.objid,
				reftype: 'PAYMENT',
				lng: params.longitude,
				lat: params.latitude,
				remarks: 'RECEIVED PAYMENT FROM '+params.collectionsheet.acctname
			];
			trackerSvc.log(map);
		}
	}

	@ProxyMethod
	public void postNote( params ) {
		if (!params.note) throw new Exception("Please specify note.");
		postCollectionSheet(params);

		def itm = batch_collectionsheet.read(params.note, "note");
		if (!itm) {
			itm = [
				objid: params.note.objid,
				parentid: params.collectionsheet.detailid,
				fromdate: params.note.fromdate,
				todate: params.note.todate,
				remarks: params.note.remarks,
				dtposted: dateSvc.serverDate,
				postedby: 'COLLECTOR NOT IDENTIFIED'
			];
			def user = sysuser.read([objid: params.collectorid]);
			if (user) itm.postedby = user.name;
			batch_collectionsheet.create(itm, "note");
		}
	}

	private void postCollectionSheet( params ) {
		if (!params.sessionid) throw new Exception("Please specify sessionid.");
		params.totalcount = 0;
		params.totalamount = 0;
		device_billing.createBatchCollectionSheetHeader(params);
		def cs = batch_collectionsheet.read([objid: params.sessionid]);
		if (!cs) throw new Exception("Collection sheet does not exist or has already been deleted.");

		def itm = batch_collectionsheet.read([objid: params.collectionsheet.detailid], "detail");
		if (!itm) {
			cs.totalcount++;
			batch_collectionsheet.update(cs, "totalcount");
		}
		device_billing.createBatchCollectionSheetDetail(params);
	}

	@ProxyMethod
	public void updateNote( params ) {
		batch_collectionsheet.update(params.note, "note");
	}

	@ProxyMethod
	public void removeNote( params ) {
		batch_collectionsheet.delete([objid: params.noteid], "note");
	}

	@ProxyMethod
	public void updateRemarks( params ) {
		if (!params.collectionsheet) throw new Exception("Please specify collection sheet.");
		postCollectionSheet(params)
		def cs = batch_collectionsheet.read([objid: params.collectionsheet.detailid] ,"detail");
		if (!cs) throw new Exception("Collection sheet does not exist or has already been deleted.");

		cs.remarks = params.remarks;
		batch_collectionsheet.update(cs, "detail");
	}

	@ProxyMethod
	public void removeRemarks( params ) {
		if (!params.detailid) throw new Exception("Please specify detailid.");
		def cs = batch_collectionsheet.read([objid: params.detailid], "detail");
		if (!cs) throw new Exception("Collection sheet does not exist or has already been deleted.");

		cs.remarks = null;
		batch_collectionsheet.update(cs, "detail");
	}

	@ProxyMethod
	public boolean isVoidPaymentApproved( params ) {
		def itm = void_payment.read([objid: params.voidid]);
		if (!itm) throw new Exception("Void payment record does not exist or has already been deleted.");

		return (itm.state == 'APPROVED')? true : false;
	}

	@ProxyMethod
	public def voidPayment( params ) {
		if (!params.paymentid) throw new Exception("Please specify paymentid.");
		if (!params.loanappid) throw new Exception("Please specify loanappid.");

		def itm = [
			objid: params.objid,
			state: 'PENDING',
			paymentid: params.paymentid,
			routecode: params.routecode,
			loanappid: params.loanappid,
			collectorid: params.collectorid,
			reason: params.reason
		]
		void_payment.create(itm);
	}

	@ProxyMethod
	public def postSpecialCollectionRequest( params ) {
		def map = [:];
		map.putAll(params);
		def user = sysuser.read([objid: map.collectorid]);
		//if (!user) throw new Exception("Collector does not exist or has already been deleted.");

		map.collector = user;
		map.dtrequested = dateSvc.serverDate;
		map.requestedby = map.collector.name;
		specialcollection.create(map);
	}

	@ProxyMethod
	public def downloadSpecialCollection( params ) {
		params = specialcollection.read(params);
		if (!params || params.state != 'APPROVED') throw new Exception("Request is still pending.");

		def routes = [];
		loan_billing.getRoutesByBillingid([billingid: params.billingid]).each{
			routes.add([
				routecode: it.code,
				routedescription: it.description,
				routearea: it.area
			]);
		}
		def list = [];
		loan_billing.getBillingDetailByParentid([parentid: params.billingid]).each{
			it.sessionid = params.billingid;
			it.routecode = it.route.code;
			it.remove("route");
			list.add(it);
		}
		return [routes: routes, list: list, request: params];
	}
}