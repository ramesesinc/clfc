import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.server.common.*;
import com.rameses.rules.common.RuleRequest;
import java.rmi.server.UID;

class LoanPaymentService
{
	@ActiveDB(value="loanapp")
	def loanapp;

	@ActiveDB(value="batch_payment")
	def batch_payment;

	@ActiveDB(value="loan_ledger")
	def ledgerdb;

	@ActiveDB(value="loan_product_type")
	def product_type;

	@ActiveDB(value="loan_payment")
	def loan_payment;

	@Resource("RuleService")
	def ruleSvc;

	@Service("DateService")
	def dateSvc;

	@Service("HolidayEventCalendarService")
	def calendarSvc;

	@Service("LoanLedgerService")
	def ledgerSvc;

	@ProxyMethod
	public def getCashBreakdown( params ) {
		if (!params.objid) throw new Exception('Please specify objid.');
		def list = batch_payment.getCashBreakdown([parentid: params.objid]);

		return list;
	}

	@ProxyMethod
	public def saveCashBreakdown( params ) {
		if (!params.objid) throw new Exception('Please specify objid.');
		if (!params.cashbreakdown) throw new Exception('Please specify denominations.');
		params.cashbreakdown.each{ 
			def itm = [
				objid: 'BPCB'+new UID(),
				parentid: params.objid,
				caption: it.caption,
				denomination: it.denomination? it.denomination : 0.00,
				qty: it.qty? it.qty : 0,
				amount: it.amount? it.amount : 0.00
			]
			batch_payment.create(itm, 'cashbreakdown'); 
		}
		return params;
	}

	@ProxyMethod
	public def updateCashBreakdown( params ) {
		if (!params.objid) throw new Exception('Please specify objid.');
		if (!params.cashbreakdown) throw new Exception('Please specify cashbreakdown.');
		params.cashbreakdown.each{ 
			batch_payment.update(it, 'cashbreakdown'); 
		}
		return params;
	}

	@ProxyMethod
	public def getUnpostedPayments( params ) {
		if(!params.route_code) throw new Exception('Route code is required');
		def bp = batch_payment.findByRoutecode(params);
		def list = []
		if (bp) {
			list = batch_payment.getDetailsByParentId([parentid: bp.objid]);
			if(bp.totalcount != list.size()) 
				throw new Exception('Payments for this route was not uploaded successfully.');
		}
		return [entity: bp, list: list];
	}

	private void createPayment( params ) {
		createPaymentHeader(params);
		def o = loan_payment.read(params.entity);
		if(o) {
			def itm = [
				objid: 		'LPDTL'+new UID(),
				parentid: 	o.objid,
				refno: 		params.refno,
				appid: 		params.appid,
				paytype: 	params.paytype,
				payamount: 	params.payamount
			]
			loan_payment.create(itm, "detail");
		}
	}
	
	private void createPaymentHeader(params) {
		def data = params.entity;
		def itm = loan_payment.read(data);
		if (!itm) {
			itm = [
				objid: 			data.objid,
				txndate: 		data.txndate,
				dtcreated: 		dateSvc.serverDate,
				totalcount: 	data.totalcount,
				totalamount: 	data.totalamount
			]
			loan_payment.create(itm);
		}
	}

	@ProxyMethod
	public void postPayment( params ) {
		if(!params.appid) throw new Exception('App. id is required.');
		def txndate;
		if(params.entity) {
			txndate = params.entity.txndate;
			createPayment(params);
		} else {
			txndate = params.txndate;
		}

		def data = [:];
		def ledger = ledgerdb.findByAppId(params);
		if (params.isfirstbill && params.isfirstbill == 1) {
			ledgerdb.update([objid: ledger.objid, paymentmethod: params.paytype]);
			ledger = ledgerdb.read(ledger);
		}

		def producttype = product_type.read([name: ledger.producttypeid]);
		def ledgeritem = ledgerdb.findLastLedgerItemByParentId([parentid: ledger.objid]);

		if (dateSvc.parseDate(params.txndate, null).date > ledger.dtmatured && ledger.overduepenalty == 0.00) {	
			//println 'balance = '+ledger.balance;
			//println 'past due rate = '+producttype.pastduerate;
			ledger.overduepenalty = ledgerSvc.computeOverduePenalty([balance: ledger.balance, pastduerate: (producttype.pastduerate? producttype.pastduerate : 0.00)]);
			//throw new Exception('stop')
			ledgerdb.update(ledger, 'overduepenalty');
		}
		//println 'ledger item = '+ledgeritem;
		def interval = 0;
		def lastscheduledate = dateSvc.add(ledger.dtstarted, "-1");
		if (ledgeritem) interval = ledgeritem.day;

		lastscheduledate = dateSvc.add(lastscheduledate, (interval+1)+'');
		txndate = dateSvc.parseDate(txndate, null).date;
		def days = dateSvc.getDaysDiff(lastscheduledate, txndate);

		def ref = [
			term: producttype.term,
			amountDue: ledger.dailydue,
			interest: ledger.interestamount,
			absentPenalty: ledger.absentpenalty,
			balance: ledger.totalprincipal,
			overduePenalty: ledger.overduepenalty,
			underpaymentRate: producttype.underpaymentpenalty
		]

		def item;
		def isCompromise = ledger.compromiseid? true : false;

		data.totalDays = days;
		data.lackingInterest = 0;
		data.lackingPenalty = 0;
		data.type = ledger.paymentmethod;

		/*if (data.totalDays == 1 && params.payamount > ledger.dailydue) data.type = 'over';
		else data.type = 'schedule';*/

		//println 'payment type-> '+data.type;
		data.isCompromise = isCompromise? 1 : 0;
		if (ledgeritem) {
			data.lackingInterest = ledgeritem.interestbal;
			data.lackingPenalty = ledgeritem.penaltybal;
			//println 'ledgeritem day: '+ledgeritem.day;
			data.currentDay = ledgeritem.day;
			if (data.lackingInterest == 0 && data.lackingPenalty == 0) data.currentDay++;
			data.totalDays += ledgeritem.day;
			if (ledgeritem.balance > 0) ref.balance = ledgeritem.balance;
		}
		if (!data.currentDay || data.currentDay == 0) data.currentDay = 1;
		data.amountPaid = params.payamount;
		def req = new RuleRequest("loan");
		//println 'data total days = '+data.totalDays;
		def paymentFact = [
			days: 1,
			balance: ref.balance,
			currentDay: data.currentDay
		];
		def referencesFact = [
			underpaymentRate: producttype.underpaymentpenalty,
			term: producttype.term,
			absentPenalty: ledger.absentpenalty,
			overduePenalty: ledger.overduepenalty,
			amountDue: ledger.dailydue,
			overpaymentAmt: (ledger.overpaymentamount > 0)? ledger.overpaymentamount : params.payamount 
		];


		def compromiseFact = [:];
		def results = [];
		def lastPayment = [:];
		def floating = [:];

		req.addFact("loan", "Payment", paymentFact); 
		req.addFact("loan", "References", referencesFact);
		req.addFact("loan", "Compromise", compromiseFact);
		req.addGlobal("results", results);
		req.addGlobal("lastPayment", lastPayment);
		req.addGlobal("floating", floating);

		lastPayment.datePaid = ledger.dtlastpaid? dateSvc.parseDate(ledger.dtlastpaid, null).date : null;

		referencesFact.interest = ref.interest;
		referencesFact.hasSunday = "false";
		def cal = Calendar.getInstance();
		cal.setTime(txndate);
		if ((cal.get(cal.DAY_OF_WEEK)-1) == 1) {
			ref.hasSunday = true;
			referencesFact.hasSunday = "true";
		}
		if (ref.hasSunday && ledger.overpaymentamount == 0.00 && ledger.paymentmethod == 'over') {
			def quotient = new BigDecimal(params.payamount+'').setScale(2, BigDecimal.ROUND_HALF_UP).divideAndRemainder(new BigDecimal("2").setScale(2, BigDecimal.ROUND_HALF_UP));
			if (quotient[0] > ledger.dailydue) {
				params.payamount = quotient[0];
				referencesFact.overpaymentAmt = params.payamount;
			}
		}
		compromiseFact.isCompromise = data.isCompromise;

		/*if (params.txndate.toString() == '2013-10-25') {
			println 'data-> '+data;
		}*/
		if (txndate == lastPayment.datePaid) {
			data.amountPaid += ledgeritem.amtpaid;
			data.totalPayment = ledgeritem.amtdue;
			data.lackingInterest = ledgeritem.interestbal;
			data.lackingPenalty = ledgeritem.penaltybal;
			data.days = ledgeritem.day;
			paymentFact.balance = ledgeritem.balance;
			def itm = ledgerdb.findLastLedgerItemNotSameDatePaid([parentid: ledger.objid, dtpaid: txndate]);
			if (itm) {
				data.currentDay = itm.day+1;
				paymentFact.balance = itm.balance;
			} else {
				paymentFact.balance = ledger.totalprincipal;
			}
			item = offsetLastPayment([item: data, ref: ref, lastledgeritem: ledgeritem]);
			referencesFact.isOffset = 1;
			paymentFact.lackingInterest = item.lackingInterest;
			paymentFact.lackingPenalty = item.lackingPenalty;
			referencesFact.amountPaid = item.amountPaid;
			lastPayment.days = data.days;
			if (item.totaldays > 1) lastPayment.days--;
			if (item.trialAndError == 0) paymentFact.days = 1;
			else if (item.lackingInterest > 0) lastPayment.days++;
			lastPayment.currentDay = ledgeritem.day;
			lastPayment.totaldays = item.totalDays;
			lastPayment.amountPaid = data.amountPaid;
		} else {
			lastPayment.totaldays = 0;
			//println 'data = '+data;
			item = preComputation(data, ref);
			lastPayment.lackingInterest = item.lackingInterest;
			referencesFact.amountPaid = item.amountPaid;
			paymentFact.days = 1;
			referencesFact.isOffset = 0;
			lastPayment.amountPaid = data.amountPaid;
			paymentFact.totalInterest = 0;
			paymentFact.totalPenalty = 0;
			paymentFact.lackingInterest = item.lackingInterest;
			paymentFact.lackingPenalty = item.lackingPenalty;
		}

		item.hasSunday = referencesFact.hasSunday;
		item.noOfHolidays = calendarSvc.getNoOfHolidays([item: item, lastscheduledate: lastscheduledate]);

		referencesFact.isFullPayment = checkIsFullPayment(item, ref);
		referencesFact.type = getPaymentType(item, referencesFact);

		paymentFact.amountPaid = item.amountPaid;
		referencesFact.totalPayment = item.totalPayment;
		referencesFact.totalDays = item.totalDays;
		referencesFact.trialAndError = item.trialAndError;
		referencesFact.isOverdue = item.isOverdue;
		referencesFact.noOfHolidays = item.noOfHolidays;
		//println params.txndate;
		ruleSvc.execute( req );
		//println params.txndate;
		/*if (params.txndate.toString() == '2011-08-25') {
			results.each{ println it; }
			throw new Exception('stop')
		}*/
		//results.each{ println it } 
		//results.each{ println it; }
		//throw new Exception('stopping');
		def lastitem;
		if (results.size() > 0) {
			lastitem = results[results.size()-1];
			//lastitem.refno = params.refno;
			//lastitem.dtpaid = txndate;
			lastitem.interestbal = new BigDecimal(floating.lackingInterest).setScale(2, BigDecimal.ROUND_HALF_UP)
			lastitem.penaltybal = new BigDecimal(floating.lackingPenalty).setScale(2, BigDecimal.ROUND_HALF_UP);
			//lastitem.paytype = params.paytype;
			lastitem.baseamount = ledger.dailydue;
			if (item.type == 'over') {
				lastitem.baseamount = (ledger.overpaymentamount > 0)? ledger.overpaymentamount : params.payamount;
				def bd = new BigDecimal(params.payamount+'').setScale(2, BigDecimal.ROUND_HALF_UP);
				def r = bd.divideAndRemainder(new BigDecimal(lastitem.baseamount+'').setScale(2, BigDecimal.ROUND_HALF_UP));
				//def mod = params.payamount%lastitem.baseamount;
				lastitem.groupbaseamount = lastitem.baseamount+r[1];
			}

			def xledger = ledgerdb.read(ledger);
			if (lastitem.balance) {
				ledgerdb.update([objid: ledger.objid, balance: lastitem.balance], "balance");
				if (xledger.balance == 0) {
					xledger.state = 'CLOSED';
					ledgerdb.update(xledger);
					loanapp.update([objid: xledger.appid, state: xledger.state]);
					loanapp.update([objid: xledger.appid, state: xledger.state], 'loanapp_search');
				}	
			}
			def day = data.currentDay;
			if (lastitem.day) day = lastitem.day;
			xledger.dtcurrentschedule = xledger.dtstarted+day;
			ledgerdb.update(xledger, "dtcurrentschedule");
		}
		//results.each{ println it.day; }
		//throw new Exception('stopping');

		def groupbaseamount = 0;
		if (item.type == 'schedule' || item.amountPaid < ledger.dailydue) groupbaseamount = ledger.dailydue;
		if (item.type == 'over') groupbaseamount = (ledger.overpaymentamount > 0)? ledger.overpaymentamount : params.payamount;

		//results.each{ println it }
		//throw new Exception('stopping')

		results.each{
			//if(it.penalty) it.penalty = new BigDecimal(it.penalty+'').setScale(2, BigDecimal.ROUND_HALF_UP);
			//println it
			def itm = createLedgerItem(ledger);
			if (it.payment) 
				itm.amtdue = new BigDecimal(it.payment).setScale(2, BigDecimal.ROUND_HALF_UP);
			else itm.amtdue = 0.00;
			itm.amtpaid = itm.amtdue;
			if (it.interestPaid)
				itm.interestdue  = new BigDecimal(it.interestPaid).setScale(2, BigDecimal.ROUND_HALF_UP);
			else itm.interestdue = 0.00;
			itm.interestpaid = itm.interestdue;

			if (it.penalty)
				itm.penaltydue = new BigDecimal(it.penalty).setScale(2, BigDecimal.ROUND_HALF_UP);
			else itm.penaltydue = 0.00;
			itm.penaltypaid = itm.penaltydue;

			itm.amtbal = 0.00;
			itm.interestbal = it.interestbal? it.interestbal : 0.00;
			itm.penaltybal = it.penaltybal? it.penaltybal : 0.00;

			itm.dtpaid = txndate;//it.dtpaid? it.dtpaid : null;
			itm.refno = params.refno;//it.refno? it.refno : null;
			itm.day = it.day? it.day : data.currentDay;
			itm.balance = it.balance? it.balance : ref.balance;
			itm.balance = new BigDecimal(itm.balance).setScale(2, BigDecimal.ROUND_HALF_UP);
			itm.partialpayment = it.partialPayment? new BigDecimal(it.partialPayment).setScale(2, BigDecimal.ROUND_HALF_UP) : 0.00;
			itm.baseamount = it.baseamount? it.baseamount : 0.00;
			itm.groupbaseamount = it.groupbaseamount? it.groupbaseamount : groupbaseamount; 
			//itm.paytype = it.paytype;
			itm.txndate = dateSvc.serverDate;
			//println 'item = '+itm;
			ledgerdb.create(itm, "detail");
		}
		//println 'overpayment amount = '+ledger.overpaymentamount;
		//println 'type = '+item.type;
		//throw new Exception('stopping');
		ledgerdb.update([objid: ledger.objid, dtlastpaid: txndate], "dtlastpaid");
		if (ledger.overpaymentamount == 0 && item.type == "over")
			ledgerdb.update([objid: ledger.objid, overpaymentamount: params.payamount], "overpayment");
		//throw new Exception('stopping')
		//payment_temp.removeByAppId(params);
	}

	private def createLedgerItem( ledger ) {
		return [
			objid: 		'LDGRITM'+new UID(),
			parentid: 	ledger.objid,
			state: 		'RECEIVED'
		]
	}

	private boolean checkIsFullPayment( item, ref ) {
		def flag = false;
		def balance = ref.balance;
		def days = item.totalDays;
		days -= item.noOfHolidays;
		if (item.hasSunday == "true") days--;
		balance += ref.absentPenalty*(days-1);
		if (item.lackingInterest > 0) balance += item.lackingInterest;
		if (item.lackingPenalty > 0) balance += item.lackingPenalty
		if (item.amountPaid >= balance) {
			def a = new BigDecimal((item.amountPaid - balance)+'').setScale(2);
			def i = new BigDecimal(ref.interest+'').setScale(2);
			def d = a.divideAndRemainder(i);
			if (d[1] == 0.00) {
				flag = true;
				//item.totalDays = d[0];
				//if (item.type == 'schedule') item.totalDays = ref.term;
			}
		}
		return flag;
	}

	private def getPaymentType( item, referencesFact ) {
		def type = 'schedule';
		if (referencesFact.isFullPayment == false) {
			if (item.trialAndError == 0 && item.type == 'over') {
				def oa = new BigDecimal(referencesFact.overpaymentAmt+'').setScale(2);
				def ap = new BigDecimal(item.amountPaid+'').setScale(2);
				def d = ap.divideAndRemainder(oa);
				//println d
				def days = d[0]
				if (days > 0) {
					//item.totalDays = days;
					type = 'over';
				}
				if (days == 0 && item.amountPaid > referencesFact.amountDue) type = 'over';
			}
		}
		return type;
	}

	private def preComputation( params, ref ) {
		def item = [:];
		item.putAll(params);
		//println 'pass 1'
		if (params.totalDays <= ref.term) {
			def totaldays = params.totalDays-(params.currentDay-1);
			if( totaldays < 1 ) totaldays = 1;
			item.totalDays = totaldays;
			//println "1total days: "+item.totalDays;
			item.totalPayment = ref.amountDue*item.totalDays;
			item.isOverdue = 0;
		//println 'pass 2'
			item.trialAndError = 0;
			if (item.amountPaid < item.totalPayment) {
				//println 'total days = '+item.totalDays;
				//println 'current day = '+item.currentDay;
				def td = item.totalDays;
				def totalInterest;
				def totalAbsentPenalty;
				def tempAmount;
				def balance;
				def underpayment;
				while( td > 1 ) {
					tempAmount = item.amountPaid;
					totalInterest = ref.interest*td;
					if( item.lackingInterest > 0 ) {
						totalInterest -= ref.interest;
						totalInterest += item.lackingInterest;
					}
					if( tempAmount > totalInterest ) {
						tempAmount -= totalInterest;
						if( tempAmount > item.lackingPenalty ) {
							tempAmount -= item.lackingPenalty;
							totalAbsentPenalty = ref.absentPenalty*td;
							if( td == item.totalDays ) totalAbsentPenalty -= ref.absentPenalty;
							if( tempAmount > totalAbsentPenalty ) {
								tempAmount -= totalAbsentPenalty;
								balance = (ref.amountDue*td)-item.amountPaid;
								underpayment = balance*ref.underpaymentRate;
								if( tempAmount > underpayment ) break;
							}
						}
					}
					td--;
				}
				if( td == item.totalDays ) item.trialAndError = 2;
				else {
					item.trialAndError = 1;
					//td++;
				}
				item.totalDays = td;
				item.totalPayment = item.amountPaid;
				//println 'total days = '+item.totalDays;
				//println 'amount paid = '+item.amountPaid;
				/*def td = 0;
				def tempAmount = item.amountPaid;
				if (tempAmount > 0 && item.lackingInterest > 0) tempAmount -= item.lackingInterest;
				if (tempAmount > 0 && item.lackingPenalty > 0) tempAmount -= item.lackingPenalty;
				if (tempAmount > 0) {
					def underpayment = ref.amountDue*ref.underpaymentRate;
					def dividend = new BigDecimal(tempAmount).setScale(2, BigDecimal.ROUND_HALF_UP);
					println 'dividend = '+dividend;
					println 'underpayment = '+underpayment;
					def divisor = new BigDecimal((ref.interest+ref.absentPenalty+underpayment)).setScale(2, BigDecimal.ROUND_HALF_UP);
					println 'divisor = '+divisor;
					def quotient = dividend.divideAndRemainder(divisor);
					println quotient;
					def remainder = quotient[1];
					quotient = quotient[0];
					if (remainder > 0) quotient++;
					if (quotient >= item.totalDays) td = item.totalDays;
					else td = quotient;
				}
				if (td == item.totalDays) item.trialAndError = 2;
				else item.trialAndError = 1;
				item.totalDays = td;
				item.totalPayment = item.amountPaid;
				println 'total days = '+item.totalDays;
				println 'amount paid = '+item.amountPaid;*/
			}
		} else {
		//println 'pass 3'
			///println 'overdue'
			//println 'overdue penalty = '+ref.overduePenalty;
			item.isOverdue = 1;
			def totaldays = params.totalDays-(params.currentDay-1);
			if( totaldays < 1 ) totaldays = 1;
			item.totalDays = totaldays;
			def td = item.totalDays;
			def deductions;
			def tempAmount;
			while( td > 1 ) {
				tempAmount = item.amountPaid;
				if( item.lackingInterest > 0 ) tempAmount -= item.lackingInterest;
				if( item.lackingPenalty > 0 ) tempAmount -= item.lackingPenalty;
				deductions = (ref.interest+ref.overduePenalty)*td;
				if( tempAmount > deductions ) break;
				td--;
			}
			item.totalDays = td;
		}
		return item;
	}

	private def offsetLastPayment( params ) {
		def ledgeritem = params.lastledgeritem;
		def itm = createLedgerItem([objid: ledgeritem.parentid]);
		itm.state = 'OFFSET';
		itm.amtdue = ledgeritem.amtdue - (ledgeritem.amtdue*2);
		itm.interestdue = ledgeritem.interestdue - (ledgeritem.interestdue*2);
		itm.penaltydue = ledgeritem.penaltydue - (ledgeritem.penaltydue*2);
		itm.amtpaid = ledgeritem.amtpaid - (ledgeritem.amtpaid*2);
		itm.interestpaid = ledgeritem.interestpaid - (ledgeritem.interestpaid*2);
		itm.penaltypaid = ledgeritem.penaltypaid - (ledgeritem.penaltypaid*2);
		itm.amtbal = ledgeritem.amtbal - (ledgeritem.amtbal*2);
		itm.interestbal = ledgeritem.interestbal - (ledgeritem.interestbal*2);
		itm.penaltybal = ledgeritem.penaltybal - (ledgeritem.penaltybal*2);
		itm.dtpaid = ledgeritem.dtpaid;
		itm.refno = ledgeritem.refno;
		itm.day = ledgeritem.day;
		itm.balance = ledgeritem.balance - (ledgeritem.balance*2);
		itm.partialpayment = ledgeritem.partialpayment - (ledgeritem.partialpayment*2);
		itm.txndate = dateSvc.serverDate;
		itm.baseamount = 0.00;
		itm.groupbaseamount = 0.00
		ledgerdb.create(itm, 'detail');

		def item = [:];
		item.putAll(params.item);
		item.lackingInterest -= ledgeritem.interestbal;
		item.lackingPenalty -= ledgeritem.penaltybal;
		def ref = params.ref;
		//println item;
		//println "item: "+item;
		if( item.totalDays <= ref.term ) {
			def totaldays = item.totalDays-(item.currentDay-1);
			if( totaldays < 1 ) totaldays = 1;
			item.totalDays = totaldays;
			item.totalPayment = ref.amountDue*item.totalDays;
			item.isOverdue = 0;
			item.trialAndError = 0;
			if( item.amountPaid < item.totalPayment ) {
				/*def td = 0;
				def tempAmount = item.amountPaid;
				if (tempAmount > 0 && item.lackingInterest > 0) tempAmount -= item.lackingInterest;
				if (tempAmount > 0 && item.lackingPenalty > 0) tempAmount -= item.lackingPenalty;
				if (tempAmount > 0) {
					def underpayment = ref.amountDue*ref.underpaymentRate;
					def dividend = new BigDecimal(tempAmount).setScale(2, BigDecimal.ROUND_HALF_UP);
					def divisor = new BigDecimal((ref.interest+ref.absentPenalty+underpayment)).setScale(2, BigDecimal.ROUND_HALF_UP);
					def quotient = dividend.divideAndRemainder(divisor);
					def remainder = quotient[1];
					quotient = quotient[0];
					if (remainder > 0) quotient++;
					if (quotient >= item.totalDays) td = item.totalDays;
					else td = quotient;
				}
				if (td == item.totalDays) item.trialAndError = 2;
				else item.trialAndError = 1;
				item.totalDays = td;
				item.totalPayment = item.amountPaid;*/
				def td = item.totalDays;
				def totalInterest;
				def totalAbsentPenalty;
				def tempAmount;
				def balance;
				def underpayment;
				while( td > 1 ) {
					tempAmount = item.amountPaid;
					totalInterest = ref.interest*td;
					if( item.lackingInterest > 0 ) {
						totalInterest -= ref.interest;
						totalInterest += item.lackingInterest;
					}
					if( tempAmount > totalInterest ) {
						tempAmount -= totalInterest;
						if( tempAmount > item.lackingPenalty ) {
							tempAmount -= item.lackingPenalty;
							totalAbsentPenalty = ref.absentPenalty*td;
							if( td == item.totalDays ) totalAbsentPenalty -= ref.absentPenalty;
							if( tempAmount > totalAbsentPenalty ) {
								tempAmount -= totalAbsentPenalty;
								balance = (ref.amountDue*td)-item.amountPaid;
								underpayment = balance*ref.underpaymentRate;
								if( tempAmount > underpayment ) break;
							}
						}
					}
					td--;
				}
				if( td == item.totalDays ) item.trialAndError = 2;
				else item.trialAndError = 1;
				item.totalDays = td;
				item.totalPayment = item.amountPaid;
			}
			else item.totalDays = Integer.valueOf((item.amountPaid/ref.amountDue).intValue());
		} 
		else {
			item.isOverdue = 1;
			def totaldays = item.totalDays-(item.currentDay-1);
			if( totaldays < 1 ) totaldays = 1;
			item.totalDays = totaldays;
			def td = item.totalDays;
			def deductions;
			def tempAmount;
			while( td > 1 ) {
				tempAmount = item.amountPaid;
				if( item.lackingInterest > 0 ) tempAmount -= item.lackingInterest;
				if( item.lackingPenalty > 0 ) tempAmount -= item.lackingPenalty;
				deductions = (ref.interest+ref.overduePenalty)*td;
				if( tempAmount > deductions ) break;
				td--;
			}
			item.totalDays = td;
			item.days--;
		}
		return item;
	}
}