import com.rameses.common.*;
import com.rameses.annotations.*;
import java.sql.Timestamp;

class ClientInformationSheetReportService
{
	@ActiveDB(value="loanapp")
	def loanapp;

	@ActiveDB(value="borrower")
	def borrower;

	@ActiveDB(value="loanapp_borrower")
	def loanapp_borrower;

	@ActiveDB(value="loanapp_business")
	def business;

	@ActiveDB(value="loanapp_otherlending")
	def otherlending;

	@ActiveDB(value="loanapp_collateral")
	def collateral;

	@Service("DateService")
	def dateSvc;

	private def getSiblings( parent ) {
		def list = borrower.getSiblings([parentid: parent.objid]);
		list.each{
			it.employments = borrower.getEmployments([refid: parent.objid]);
			it.otherincomes = borrower.getOtherIncomes([refid: parent.objid]);
		}
		return list;
	}

	private def getChildren( parent ) {
		def list = borrower.getChildren([parentid: parent.objid]);
		list.each{
			it.employments = borrower.getEmployments([refid: parent.objid]);
			it.otherincomes = borrower.getOtherIncomes([refid: parent.objid]);
		}
		return list;
	}

	private def getJointBorrowers( app, currentdate ) {
		def list = loanapp_borrower.getJointBorrowers([parentid: app.objid]);
		list.each{joint->
            if (!joint.name) joint.name = joint.lastname+', '+joint.firstname+' '+(joint.middlename? joint.middlename : '')
			joint.age = 0;
			if (joint.birthdate) joint.age = currentdate.year - dateSvc.parseDate(joint.birthdate, null).year;
			joint.spouse.name;
			if (joint.spouse.objid) {
                joint.spouse.name = joint.spouse.lastname+', '+joint.spouse.firstname+' '+(joint.spouse.middlename? joint.spouse.middlename : '')
                joint.spouse.age = 0;
                if (joint.spouse.birthdate) joint.spouse.age = currentdate.year - dateSvc.parseDate(joint.spouse.birthdate, null).year;
            }
			joint.children = borrower.getChildren([parentid: joint.objid]);
			joint.educations = borrower.getEducations([parentid: joint.objid]);
			joint.employments = borrower.getEmployments([refid: joint.objid]);
			joint.parents = borrower.findParent(joint);
			joint.siblings = borrower.getSiblings(joint);
			joint.otherincomes = borrower.getOtherIncomes([refid: joint.objid]);
			joint.savingaccts = borrower.getBankAccts([parentid: joint.objid, type: 'SAVING']);
			joint.checkingaccts = borrower.getBankAccts([parentid: joint.objid, type: 'CHECKING']);
		}
		return list;
	}

	private def getComakers( app, currentdate ) {
		def list = loanapp_borrower.getComakers([parentid: app.objid]);
		list.each{comaker->
            if (!comaker.name) comaker.name = comaker.lastname+', '+comaker.firstname+' '+(comaker.middlename? comaker.middlename : '')
			comaker.age = 0;
			if (comaker.birthdate) comaker.age = currentdate.year - dateSvc.parseDate(comaker.birthdate, null).year;
			comaker.spouse.name;
			if (comaker.spouse.objid) {
                comaker.spouse.name = comaker.spouse.lastname+', '+comaker.spouse.firstname+' '+(comaker.spouse.middlename? comaker.spouse.middlename : '')
                comaker.spouse.age = 0;
                if (comaker.spouse.birthdate) comaker.spouse.age = currentdate.year - dateSvc.parseDate(comaker.spouse.birthdate, null).year;
            }
			comaker.children = borrower.getChildren([parentid: comaker.objid]);
			comaker.educations = borrower.getEducations([parentid: comaker.objid]);
			comaker.employments = borrower.getEmployments([refid: comaker.objid]);
			comaker.parents = borrower.findParent(comaker);
			comaker.siblings = borrower.getSiblings(comaker);
			comaker.otherincomes = borrower.getOtherIncomes([refid: comaker.objid]);
			comaker.savingaccts = borrower.getBankAccts([parentid: comaker.objid, type: 'SAVING']);
			comaker.checkingaccts = borrower.getBankAccts([parentid: comaker.objid, type: 'CHECKING']);
		}
		return list;		
	}

	@ProxyMethod
	public def getReportData( params ) {
		if (!params.loanappid) throw new Exception('Please specify loanappid');

		def app = loanapp.read([objid: params.loanappid]);
		def pb = borrower.read(app.borrower);
		def currentdate = dateSvc.parseCurrentDate();
		pb.age = 0
		if (pb.birthdate) pb.age = currentdate.year - dateSvc.parseDate(pb.birthdate, null).year
		pb.spouse.name;
		if (pb.spouse.objid) {
            pb.spouse.name = pb.spouse.lastname+', '+pb.spouse.firstname+' '+(pb.spouse.middlename? pb.spouse.middlename : '')
            pb.spouse.age = 0;
            if (pb.spouse.birthdate) pb.spouse.age = currentdate.year - dateSvc.parseDate(pb.spouse.birthdate, null).year;
        }
		pb.children = borrower.getChildren([parentid: pb.objid]);
		pb.educations = borrower.getEducations([parentid: pb.objid]);
		pb.employments = borrower.getEmployments([refid: pb.objid]);
		pb.parents = borrower.findParent(pb);
		pb.siblings = getSiblings(pb);
		pb.otherincomes = borrower.getOtherIncomes([refid: pb.objid]);
		pb.savingaccts = borrower.getBankAccts([parentid: pb.objid, type:'SAVING']);
		pb.checkingaccts = borrower.getBankAccts([parentid: pb.objid, type:'CHECKING']);

        //TEMP DATA
        def data = [
            branchname	: 'BRANCH NAME',
            dtfiled		: new Date(),
            filedby		: 'FILED BY',
            caoname		: 'CAO NAME',
            appno		: app.appno,//'APP. NO',
            apptype		: app.apptype,//'APP. TYPE',
            state		: app.state,//'STATE',
            marketer	: 'MARKETER',
            modifiedby	: 'MODIFIED BY',
            marketedby	: 'MARKETED BY',
            printedby	: 'PRINTED BY',
            dtprinted	: currentdate.date,
            route		: [code:'ROUTE CODE', description:'ROUTE DESCRIPTION'],
            borrower	: pb,
            jointborrowers : getJointBorrowers(app, currentdate),
            comakers : getComakers(app, currentdate),
            businesses : business.getList([parentid: app.objid]),
            otherlendings : otherlending.getList([parentid: app.objid]),
            loaninfo : [
                loanamount	: 1000.00,
                purpose	: 'LOAN PURPOSE',
                marketedby	: 'MARKETED BY',
                clienttype	: 'CLIENT TYPE',
                producttype	: [
                    code : 'CODE',
                    term : 2
                ],
                approval	: [
                    amount		: 1000.00,
                    absencetype	: 'ABSENCE TYPE',
                    absencepolicy 	 : 'ABSENCE POLICY',
                    absenceprovision : 'ABSENCE PROVISION',
                    remarks		: 'REMARKS',
                    creditlimit     : 50000.00,
                    increase        : 5000.00,
                    mustcollateral  : [
                        appliancelist   : [id:1, must:true],
                        propertylist    : [id:2, must:true],
                        vehiclelist     : [id:3, must:true]
                    ]
                ]
            ],
            collateral	: [
                properties : collateral.getProperties([parentid: app.objid]),
                appliances : collateral.getAppliances([parentid: app.objid]),
                vehicles : collateral.getVehicles([parentid: app.objid]),
                othercollateral : collateral.findOtherCollateral(app)
            ],
        ];
        data.businessesci = data.businesses;
        data.totalcav = 0.00;
        def amt = data.collateral.properties.marketvalue.sum();
        if(amt) data.totalcav += amt;
        amt = data.collateral.appliances.marketvalue.sum();
        if(amt) data.totalcav += amt;
        amt = data.collateral.vehicles.marketvalue.sum();
        if(amt) data.totalcav += amt;
        return data;
	}
}