import com.rameses.common.*;
import com.rameses.annotations.*;

class DeviceLoanBillingService
{
	@ActiveDB(value="loan_route")
	def route;

	@ActiveDB(value="loan_ledger")
	def ledger;

	@ActiveDB(value="loan_payment_temp")
	def payment_temp;

	@Service('DateService')
	def dateSvc;

	@Service('SequenceService') 
	def seqSvc;

	@ProxyMethod
	public def getRoutes(params) {
		def result = route.getList();
		def list = [];
		list.addAll(result)
		return list;
	}


	@ProxyMethod
	public def downloadBilling(params) {
		if(!params.route_code) throw new Exception('Please specify route code');
		def result = ledger.getCollectionsheets(params);
		def currentDate = dateSvc.parseCurrentDate().date;
		def days;
		def list = [];
		result.each{
			def dtlastpaid;
			if(!it.dtlastpaid)
				dtlastpaid = dateSvc.add(it.dtstarted, "-1");
			else 
				dtlastpaid = dateSvc.parseDate(it.dtlastpaid, null).date;

			days = dateSvc.getDaysDiff(dtlastpaid, currentDate)-1;
			it.refno = 'B'+seqSvc.getNextFormattedSeriesA('loanbill', 8); 
			it.amountdue = it.dailydue*days;
			list.add(it);
		}
		def map = [sessionid: new java.rmi.server.UID().toString(), list: list, serverdate: dateSvc.serverDate];
		return map;
	}

	@ProxyMethod
	public def uploadPayments(params) {
		if(!params.payments) throw new Exception('Payments are required');
		def result = [:];
		def list = [];
		def date = dateSvc.serverDate;
		params.payments.each{ 
			def data = [
				objid: 		'TMP'+new java.rmi.server.UID(),
				dtcreated: 	date,
				refid: 		it.sessionid,
				refno: 		it.refno,
				appid: 		it.loanappid,
				paytype: 	it.type,
				payamount: 	it.amount
			]
			def txndate = dateSvc.parse("MMM-dd-yyyy", it.txndate);
			txndate = dateSvc.parse("yyyy-mm-dd", txndate);
			data.txndate = txndate;
			payment_temp.create(data);
			list.add(it.loanappid); 
		}
		result.list = list;
		return result;
	}
}