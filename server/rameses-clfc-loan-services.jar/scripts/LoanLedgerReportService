import com.rameses.annotations.*;

class LoanLedgerReportService
{
	@ActiveDB(value="loan_ledger")
	def ledgerdb;

	@ActiveDB(value="loan_product_type")
	def product_type;

	@ActiveDB(value="loanapp")
	def loanapp;

	@ActiveDB(value="loan_exemption")
	def exemption;

	@ActiveDB(value="borrower")
	def borrower;

	@ActiveDB(value="loanapp_business")
	def business;

	@Service("DateService")
	def dateSvc;

	@Service("ComakerService")
	def comakerSvc;

	@ProxyMethod
	public def getReportData( params ) {
		if (!params.objid) throw new Exception('Please specify objid');
		if (!params.appid) throw new Exception('Please specify appid');

		def ledger = ledgerdb.read(params);
		def pb = borrower.read([objid: ledger.acctid]);
		def producttype = product_type.read([name: ledger.producttypeid]);
		def app = loanapp.read([objid: params.appid]);

		def spousename = "";
		if(pb.spouse.objid) spousename = pb.spouse.lastname+', '+pb.spouse.firstname+' '+(pb.spouse.middlename? pb.spouse.middlename : '');

		def comakers = comakerSvc.open([objid: ledger.appid]).comakers;
		def comaker = [:];
		if (comakers) {
			comaker.putAll(comakers[0]);
			comaker.name = comaker.lastname+', '+comaker.firstname+' '+(comaker.middlename? comaker.middlename : '');
		}

		def businesses = business.getList([parentid: ledger.appid]);
		def firm = [:];
		if (businesses) firm.putAll(businesses[0]);

		def data = [
			borrowername	: ledger.acctname,
			spousename 		: spousename,
			borroweraddress	: pb.address,
			borrowertelno 	: pb.contactno,
			comakername 	: comaker?.name,
			comakeraddress 	: comaker?.address,
			comakertelno 	: comaker?.contactno,
			officename 		: firm?.tradename,
			officeaddress 	: firm?.address,
			officetelno 	: firm?.contactno,
			pn 				: app?.appno,
			originalamtloan	: ledger.totalprincipal,
			dategranted		: dateSvc.add(ledger.dtstarted, "-1"),
			datematurity	: ledger.dtmatured,
			interestrate	: producttype.interestrate,
			term			: producttype.term,
			dailypayment	: ledger.dailydue,
			payments 		: []
		];
		def payments = ledgerdb.getLedgerDetailsByLedgerid([parentid: ledger.objid]);

		def flag = false;
		def prevrefno;
		def prevbal;
		def exemptedamt = 0;
		def lastday = 0;
		payments.each{
			def itm = [
				paymentschedule 	: dateSvc.add(data.dategranted, it.day+''),
				originalamount		: null,
				partialpayment		: it.partialpayment,
				balanceamount		: it.balance,
				interestpaid		: (it.interestpaid != 0)? it.interestpaid : null,
				penaltycharge		: it.penaltypaid,
				totalpayment		: (it.amtpaid != 0)? it.amtpaid : null,
				receiptno			: it.refno,
				datepaid			: it.dtpaid
			];
			if (it.state != "OFFSET") {
				def e = exemption.findExemptionByDateAndLedgerid([txndate: itm.paymentschedule, ledgerid: ledger.objid]);
				if (e) {
					exemptedamt += ledger.absentpenalty;
					itm.remarks = 'WAIVED By '+e.createdby;
				}
				if (it.balance == ledger.totalprincipal) {
					itm.balanceamount = null;
				}
				if (it.balance == prevbal) {
					itm.balanceamount = null;
				}
				if (it.partialpayment == 0) {
					itm.partialpayment = null;
				}
				if (!flag && it.interestbal == 0 && it.penaltybal == 0) {
					itm.originalamount = ledger.totalprincipal;
					flag = true;
				}
				if (it.refno == prevrefno) {
					itm.receiptno = null;
					itm.datepaid = null
				}
				if (it.interestbal > 0) {
					if (!itm.remarks) itm.remarks = '';
					else itm.remarks += '\n';
					itm.remarks += 'lacking interest: '+it.interestbal;
				}
				if (it.penaltybal > 0) {
					if(!itm.remarks) itm.remarks = '';
					else itm.remarks += '\n';
					itm.remarks += 'lacking penalty: '+it.penaltybal;
				}
				if (it.penaltypaid == 0) itm.penaltycharge = null;
				if (it.amtpaid != 0) {
					def total = (it.day - lastday)*ledger.dailydue;
					if (it.amtpaid == total && itm.penaltycharge) {
						itm.penaltycharge -= exemptedamt;
					}
					lastday = it.day;
					prevrefno = it.refno;
					exemptedamt = 0;
				}
				else {
					itm.receiptno = null;
					itm.datepaid = null;
				}
				prevbal = it.balance;
			} else {
				if (itm.penaltycharge == 0) itm.penaltycharge = null;
				itm.receiptno = null;
				itm.datepaid = null;
				if (itm.partialpayment == 0) {
					itm.partialpayment = null;
					itm.balanceamount = null;
				}
			}
			data.payments.add(itm);
		}

		def list = data.payments.findAll{ it.penaltycharge != null }
		//data.totalcharges = list.penaltycharge.sum();
		if (!data.totalcharges) data.totalcharges = 0.00;

		return data;
	}
}