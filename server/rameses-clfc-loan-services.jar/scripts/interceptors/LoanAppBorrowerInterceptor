import com.rameses.annotations.*;
import com.rameses.common.*;
import java.rmi.server.UID;

class LoanAppBorrowerInterceptor
{
	@ActiveDB(value='loanapp')
	def em;

	@After(pattern='BorrowerService.update') 
	public void afterUpdate( evt ) { 
		def result = evt.result; 
		if (!result?._loanappid) return; 

		def loanapp = em.read([objid: result._loanappid]); 
		if (!loanapp) return; 

		if (result._datatype == 'principalborrower') {
			loanapp.borrower.objid = result.objid;
			loanapp.borrower.name = result.name;
			em.update(loanapp);
			updatePrincipalBorrower(result);

		} else if (result._datatype == 'jointborrower') {


		} else if (result._datatype == 'comaker') {


		} else {
			return;
		}

		em.removeBorrowerIndices([loanappid: loanapp.objid]); 
		def list = em.getBorrowers([parentid: loanapp.objid]);
		for (o in list) {
			o.objid = 'BIDX' + new UID();
			o.loanappid = loanapp.objid;
			o.loanappno = loanapp.appno;
			o.borrowername = createFullName(o.lastname, o.firstname, o.middlename);
			em.create(o, 'borrower_index'); 
		} 

		list = em.getQualifiedIndexNames([loanappid: loanapp.objid]);
		def fullborrowername = list.collect{ it.borrowername }.join(' AND '); 
		em.updateFullBorrowerName([fullborrowername: fullborrowername, objid: loanapp.objid]); 
	} 

	private String createFullName(lname, fname, mname) {
		def s = lname + ', ' + fname; 
		if (mname) s = s + ' ' + mname; 

		return s;
	}

	private void updatePrincipalBorrower(data) {
		def o = em.findBorrower([parentid: data._loanappid, type: 'PRINCIPAL']);
		if (o == null) {
			o = [ 
				objid: 'LBRWR' + new UID(), 
				parentid: data._loanappid, 
				borrowerid: data.objid, 
				principalid: data.objid,  
				type: 'PRINCIPAL' 
			]; 
			em.create(o, 'borrower'); 
		} else {
			o.borrowerid = data.objid;
			o.principalid = data.objid; 
			em.update(o, 'borrower'); 
		} 
	}
}  
