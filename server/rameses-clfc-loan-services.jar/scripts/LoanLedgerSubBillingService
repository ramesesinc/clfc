import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class LoanLedgerSubBillingService extends ActiveCrudService
{
	@Env
	def env;

	@ActiveDB(value="loan_ledger_billing")
	def em;

	@ActiveDB(value="batch_collectionsheet")
	def batch_collectionsheet;

	@ActiveDB(value="void_payment")
	def void_payment;

	@Service("DateService")
	def dateSvc;
	
	void beforeCreate( params ) {
		params.dtcreated = dateSvc.serverDate;
		params.createdby = env.USER;
		params.dtmodified = params.dtcreated;
	}

	void afterCreate( params ) {
		params.subcollector.username = params.subcollector.name;
		em.changeStateVoided([objid: params.parentid]);
		em.changeBatchCollectionSheetStateVoided([objid: params.parentid]);
		em.create(params, "sub-billing")
		updateRoute(params);
		updateBillingDetail(params);
	}

	void beforeUpdate( params ) {
		params.dtmodified = dateSvc.serverDate
		em.changeStateDraft([objid: params._parentid]);
		em.update([objid: params._parentid, dtcancelled: null, cancelledby: null, remarks: null]);
		em.changeBatchCollectionSheetStateDraft([objid: params._parentid]);
	}

	void afterUpdate( params ) {
		params.subcollector.username = params.subcollector.name;
		em.changeStateVoided([objid: params.parentid]);
		em.changeBatchCollectionSheetStateVoided([objid: params.parentid]);
		em.update(params, "sub-billing")
		updateRoute(params);
		updateBillingDetail(params);
	}

	void updateBillingDetail( params ) {
		em.removeBillingDetailByParentid([parentid: params.objid]);

		def itm = batch_collectionsheet.read([objid: params.parentid]);
		if (itm) {
			def m = [
				objid: itm.objid,
				dtcancelled: dateSvc.serverDate,
				cancelledby: env.USER,
				remarks: params.reason
			]
			em.update(m, "cancel");

			itm.objid = params.objid;
			itm.state = 'DRAFT';
			batch_collectionsheet.create(itm);
		}

		def list = em.getBillingDetailByParentid([parentid: params.parentid]);
		def csList = batch_collectionsheet.getDetailsByParentid([parentid: params.parentid]);
		def objid;
		def payments;
		def notes;
		def voidrequest;
		def paymentid;
		list.each{bill->
			objid = 'LLSBD'+new UID();
			itm = csList.find{ bill.objid == it.objid }
			if (itm) {
				//itm.objid
				payments = batch_collectionsheet.getPaymentsByDetailid([parentid: itm.objid]);
				notes = batch_collectionsheet.getNotesByDetailid([parentid: itm.objid]);

				itm.objid = objid;
				itm.parentid = params.objid;
				batch_collectionsheet.create(itm, "detail");

				payments.each{
					paymentid = "PT"+new UID();
					voidrequest = void_payment.findVoidPaymentByPaymentid([paymentid: it.objid]);
					if (voidrequest) {
						void_payment.changeStateVoided(voidrequest);
						voidrequest.objid = "VOID"+new UID();
						voidrequest.paymentid = paymentid;
						void_payment.create(voidrequest);
					}
					it.objid = paymentid;
					it.parentid = itm.objid;
					batch_collectionsheet.create(it, "payment");
				}

				notes.each{
					it.objid = "NOTE"+new UID();
					it.parentid = itm.objid;
					batch_collectionsheet.create(it, "note");
				}
			}
			bill.objid = objid;
			bill.parentid = params.objid;
			em.create(bill, "detail");
		}
	}

	void afterOpen( data ) {
		data.putAll(em.read(data, "sub-billing"));
		data.subcollector.name = data.subcollector.username;
		data.routes = em.getRoutesByBillingid([billingid: data.objid]);
	}

	void updateRoute( params ) {
		em.removeRouteByBillingid([billingid: params.objid]);
		params.routes.each{o->
			em.create([billingid: params.objid, routecode: o.code], 'billing_route');
		}
	}

	@ProxyMethod
	public def resetBilling( params ) {
		params.dtmodified = dateSvc.serverDate;
		em.update(params, "datemodified");
		updateBillingDetail(params);
		em.removeBillingLockByBillingid([billingid: params.objid]);
	}
}
