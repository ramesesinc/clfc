import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;

class LoanLedgerService extends ActiveListService
{	
	@ActiveDB(value='loan_ledger')
	def em;

	@ActiveDB(value='batch_payment')
	def batch_payment;

	@ActiveDB(value='loan_ledger_billing')
	def ledger_billing;

	@Service('LoanPaymentService')
	def paymentSvc;

	@Service('LoanLedgerAdjustmentService')
	def adjustmentSvc;

	@ProxyMethod
	public def getColumns( params ) {
		return [
			[name:'appno', caption:'App. No.', width:150],
			[name:'state', caption:'State', width: 100],
			[name:'borrower.name', caption:'Borrower Name', width:250],
			[name:'dailydue', caption:'Daily Due', width:100],
			[name:'interest', caption:'Interest', width:100],
			[name:'dtstarted', caption:'Date Started', width:100],
			[name:'dtmatured', caption:'Date Matured', width:100]
		]
	}

	@ProxyMethod
	public def open( data ) {
		data = em.findLedgerById(data);
		if (!data) throw new Exception('Record does not exist or has already been deleted.');

		data.paymentmethod = (data.paymentmethod == 'schedule'? 'Schedule/Advance' : 'Overpayment');
		data.payments = adjustmentSvc.getPayments([ledgerid: data.objid]);	
		return data;	
	}

	@ProxyMethod
	public def rebuild( data ) {
		em.removeLedgerDetail([parentid: data.objid]);
		def ledger = em.read(data);
		ledger.balance = data.loanamount;
		ledger.overpaymentamount = 0.00;
		ledger.overduepenalty = 0.00;
		ledger.dtlastpaid = null;
		ledger.dtcurrentschedule = ledger.dtstarted
		em.update(ledger);
		data.payments.sort{ it.txndate.toString()+''+it.refno }
		data.payments.each{
			def itm = [
			    appno: data.appno,
			    appid: data.appid,
			    borrowername: data.acctname,
			    refno: it.refno,
			    txndate: it.txndate,
			    payamount: it.payamount
			]
			paymentSvc.postPayment(itm);
		}
		data.ledgerid = data.objid;
		return open(data);
	}

	@ProxyMethod 
	public def create(data) { 
		if (!data.txnmode) throw new Exception('Please specify txnmode.');

		def loancount = em.findLoanCountByAcctid([acctid: data.acctid]).loancount; 
		data.loancount = loancount+1;
		data.totalprincipal = data.loanamount;
		data.balance = data.loanamount;
		data.dailydue = computeDailyDue(data);
		data.interestamount = computeInterestAmount(data);
		data.absentpenalty = computeAbsentPenalty(data);
		data.overpaymentamount = 0.00
		data.overduepenalty = 0.00;
		data.totaldue = 0.00;
		data.state = 'OPEN';
		data.dtcurrentschedule = data.dtstarted;
		data.updatetype = (data.txnmode == 'CAPTURE'? 0 : 1);
		em.create(data);
		data.payments.each{
			def itm = [
			    appno: data.appno,
			    appid: data.appid,
			    borrowername: data.borrower.name,
			    refno: it.refno,
			    txndate: it.txndate,
			    payamount: it.amount
			]
			paymentSvc.postPayment(itm);
		}
	}

	@ProxyMethod
	public def roundOffAmount(amt) {
		def amount = amt+'';
		def result = 0;
		def ld = Integer.parseInt(amount[amount.length()-1]);
		if(ld > 0 && ld < 5) {
			result = new BigDecimal(amount.substring(0, amount.length()-1)+'5');
			result = result.setScale(2);
		} else if(ld > 5) {
		    def a = '0.0'+(10 - ld)
		    result = new BigDecimal(amount).add(new BigDecimal(a)).setScale(2);
		} else {
			result = new BigDecimal(amount).setScale(2); 
		} 
		return result;
	}

	private def computeDailyDue(params) {
		if(!params.loanamount) throw new Exception('Please specify loan amount');
		if(!params.term) throw new Exception('Please specify term');
		def result = new BigDecimal(params.loanamount+'');
		def term = new BigDecimal(params.term+'').divide(new BigDecimal("100")).setScale(2, BigDecimal.ROUND_HALF_UP);
		result = result.setScale(2, BigDecimal.ROUND_HALF_UP).multiply(term);
		result = result.divide(new BigDecimal(params.term+'')).setScale(2, BigDecimal.ROUND_HALF_UP); 
		return result;
	}

	private def computeInterestAmount(params) {
		if(!params.loanamount) throw new Exception('Please specify loan amount');
		if(!params.interestrate) throw new Exception('Please specify interest rate');
		def result = new BigDecimal(params.loanamount+'').setScale(2).multiply(new BigDecimal(params.interestrate+'').setScale(2));
		result = result.setScale(2).divide(30, BigDecimal.ROUND_HALF_UP);
		return roundOffAmount(result);
	}

	private def computeAbsentPenalty(params) {
		if(!params.dailydue) throw new Exception('Please specify daily due.');
		if(!params.absentrate) throw new Exception('Please specify absent penalty rate.');
		def result = new BigDecimal(params.dailydue+'').setScale(2).multiply(new BigDecimal(params.absentrate+'').setScale(2));
		return roundOffAmount(result.setScale(2));
	}

	void beforeList( params ) {
		params.searchtext = (params.searchtext? '%'+params.searchtext+'%' : '%');
	}

	@ProxyMethod
	public def approveBatchPayment( params ) {
		if (!params.unpostedpayments) throw new Exception('Please specify unposted payments');
		if (!params.entity) throw new Exception('Please specify entity');

		def m;
		def ledger;
		params.unpostedpayments.each{
			m = ledger_billing.read(it, 'detail');
			if (!m) throw new Exception('No ledger for billing no. '+it.refno);

			ledger = em.read([objid: m.ledgerid]);
			if (ledger.updatetype == 0) {
				ledger.updatetype = 1;
				em.update(ledger, 'updatetype');
			}
			it.entity = params.entity;
			paymentSvc.postPayment(it);
		}
		batch_payment.changeStateApproved(params.entity);
		ledger_billing.changeStateCompleted(params.entity);
		return params;
	}
}
