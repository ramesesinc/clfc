import com.rameses.common.*;
import com.rameses.annotations.*;

class MobileBillingService
{
	@ActiveDB(value="field_collection")
	def field_collection;

	@ActiveDB(value="loan_ledger_billing")
	def ledger_billing;

	@Service('DateService')
	def dateSvc;

	@Service("MobileTrackerService")
	def trackerSvc;

	@ProxyMethod
	public def getRoutes(params) {
		if (!params.collectorid) throw new Exception("Please specify collectorid");
		def date = dateSvc.parseCurrentDate();
		def d = date.year+'-'+date.month+'-'+date.day;
		def billing = ledger_billing.getBillingByCollectorid([collectorid: params.collectorid, billdate: d]);
		def subbilling = ledger_billing.getBillingBySubCollectorid([subcollectorid: params.collectorid, billdate: d]);
		if (!billing && !subbilling) throw new Exception('You have no billing to download for today.');

		billing.addAll(subbilling);

		def routes = [];
		def list;
		billing.each{bill->
			list = ledger_billing.getRoutesByBillingid([billingid: bill.objid]);
			list.each{
				it.billingid = bill.objid;
				routes.add(it);
			}
		}
		return routes;
	}

	@ProxyMethod
	public def downloadBilling(params) {
		if (!params.route_code) throw new Exception('Please specify route code');
		if (!params.billingid) throw new Exception('Please specify billingid');

		def r = ledger_billing.findRouteByBillingidAndRoutecode([billingid: params.billingid, routecode: params.route_code]);
		if (!r) throw new Exception("Record does not exist or has already been deleted.");

		if (r.downloaded != 0) throw new Exception('This billing has already been downloaded.');
		/*if (ledger_billing.findBillingLock([billingid: params.billingid, routecode: params.route_code])) 
			throw new Exception('This billing has already been downloaded.');*/

		/*def unpostedpayment = batch_collectionsheet.findUnpostedPayment(params);*/
		/*def unpostedpayment = field_collection.findUnpostedCollection([billingid: params.billingid, routecode: params.route_code]);
		if (unpostedpayment) throw new Exception('Cannot download billing. There are still unposted payments.');*/

		def result = ledger_billing.getBillingDetailByRoutecode(params);
		if (!result) throw new Exception('No billing for route '+params.route_description+' - '+params.route_area);


		def noNexttoList = result.findAll{ it.nextto == null }
		def hasNexttoList = result.findAll{ it.nextto != null }

		for(int i=0; i<hasNexttoList.size(); i++) {
			for(int j=i+1; j<hasNexttoList.size(); j++) {
				if (hasNexttoList[i].nextto == hasNexttoList[j].acctid) {
					hasNexttoList.add(i, hasNexttoList.remove(j));
					i = 0;
					break;
				}
			}
		}

		def list = [];
		noNexttoList.each{ list.add(it); }
		def map;
		hasNexttoList.each{itm->
			map = noNexttoList.find{ it.acctid == itm.nextto }
			if (map) {
				list.remove(map);
				list.add(map);
			}
			list.add(itm);
		}
		def payments;
		list.eachWithIndex{itm, idx->
			itm.seqno = idx+1;
			payments = field_collection.getPaymentsByParentid([parentid: itm.objid]);
			itm.payments = [];
			payments.each{
				it.detailid = itm.objid;
				it.loanappid = itm.loanappid;
				it.amount = it.payamount;
				it.type = it.paytype;
				it.routecode = itm.route.code;
				it.isfirstbill = itm.isfirstbill;
				it.txndate = it.dtfiled;
				itm.payments.add(it);
			}
			/*notes = batch_collectionsheet.getNotesByDetailid([parentid: itm.objid]);
			itm.notes = [];
			notes.each{
				it.loanappid = itm.loanappid;
				itm.notes.add(it);
			}*/
			map = field_collection.read(itm);//batch_collectionsheet.findDetailById([objid: itm.objid]);
			if (map && map.remarks) itm.remarks = map.remarks;
			else itm.remove("remarks");
		}
		ledger_billing.routeDownloaded([billingid: params.billingid, routecode: params.route_code]);
		def bill = ledger_billing.read([objid: params.billingid]);
		bill.totalfordownload--;
		ledger_billing.update(bill, "totalfordownload");
		bill.totaldownloaded++;
		ledger_billing.update(bill, "totaldownloaded");
		//ledger_billing.create([billingid: params.billingid, routecode: params.route_code], "lock");
		def session = trackerSvc.open([trackerid: params.trackerid]);
		if (!session) {
			params.trackerid = trackerSvc.start([lng: params.longitude, lat: params.latitude, terminalid: params.terminalid, userid: params.userid]).objid;
		}
		return [billings: list, trackerid: params.trackerid];
	}	
}